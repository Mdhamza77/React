// Defining a basic JSx .   

const roo = ReactDOM.createRoot(document.getElementById('roo'));
const name = "Welcome to Jsx"
roo.render(<h1>This is used inside an root elements {name}</h1>)

 <div id="roo"></div>
    

//   This is a Name fomat Expression function Using ReactDOM - Jsx  
function formatName(user) {
    return user.firstName + ' ' + user.lastName;
  }
  
  const user = {
    firstName: 'Harper',
    lastName: 'Perez'
  };
  
  const element = (
    <h1>
      Hello, {formatName(user)}!
    </h1>
  );
// Jsx As an Expression
function getGreeting(user) {
    if (user) {
      return <h1>Hello, {formatName(user)}</h1>;
    }
    return <h1>Hello, Stranger.</h1>;
  }

  const fun = ReactDOM.createRoot(document.getElementById('r'))
  fun.render(<h3>This is to call function formatName {element}</h3>)

 
  <div id="r"></div>


  //   Child element

  const elem  =  (
    <div> 
         <h1>Hello</h1>
         <h2>This consist of Child elements</h2>
     </div>
)



===========================================================================================================================

2 .  Rendering an elements   

  2.1   Example of Rendering   

        const dom = ReactDOM.createRoot(document.getElementById('root'))
        const x = ( <h6>This is to show How Rendering </h6>)
         dom.render(<p>{x}</p>)   

   2.2  Updating Rendering element

   function tick() {
    const elements = (
        <div>
            <h3>React DOM compares the element and its children to the previous one, and only applies the DOM updates necessary to bring the DOM to the desired state.</h3>
            <h1>It's {new Date().toLocaleTimeString()} local time date </h1>
        </div>
    )
    root.render(elements)
}
setInterval(tick,100)      
       

=============================================================================================================================================================================================================================================

3. Components and Props  


    3.1 function  Example   Using element as Properties

        function Welcome(props) {
             return <h1>Hello, {props.name}</h1>;
        }
  
        const comp = {name : "jamal" }
        const ele = (<h1>{Welcome(comp)}</h1>)       
        root.render(ele)


      3.2 elements can also be Defined USer Defined  Components  

      function Welcome(props) {
    return <h1>Hello, {props.name}</h1>;
      }
  
  const comp = <Welcome name="Alia"/>
  root.render(comp)

    Steps  :   

    Letâ€™s recap what happens in this example:

We call root.render() with the <Welcome name="Sara" /> element.
React calls the Welcome component with {name: 'Sara'} as the props.
Our Welcome component returns a <h1>Hello, Sara</h1> element as the result.
React DOM efficiently updates the DOM to match <h1>Hello, Sara</h1>.

   3.3   Composing Components 

   function Welcome(props) {
    return <h1>Hello, {props.name}</h1>;
  }
  
  function Ap() {
    return (
      <div>
        <Welcome name="Sara" />
        <Welcome name="Cahal" />
        <Welcome name="Edite" />
      </div>
    );
  }

  root.render(<h2>{Ap()}</h2>)

  3.3  Pure Function  


    function sum(a,b){
    return a+b
      }
    const x = (<h1>{sum(22,33)}</h1>)
     root.render(x)
